plugins {
    id 'todo.kotlin-application-conventions'
    id 'org.openjfx.javafxplugin' version '0.0.12'
    id 'org.beryx.runtime' version '1.12.5'
    id 'io.ktor.plugin' version '2.1.2'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.20'
}

application {
    mainClass = 'Main'
}

javafx {
    version = '17.0.2'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation project(":shared")

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4")

    // Ktor Http service
    testImplementation "io.ktor:ktor-client-mock:$ktor_version"
    implementation("io.ktor:ktor-client-core:$ktor_version")
    implementation "io.ktor:ktor-client-cio:$ktor_version"
    implementation "io.ktor:ktor-client-content-negotiation:$ktor_version"
    implementation "io.ktor:ktor-serialization-kotlinx-json:$ktor_version"
    implementation "org.xerial:sqlite-jdbc:3.39.3.0"
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

// Uncomment and adjust the code below if you want to generate images for multiple platforms.
// (You need to also uncomment the line 'targetPlatformName = ...' in the jpackage block.)

//    targetPlatform("lin") {
//        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_x64_linux_hotspot_15.0.2_7.tar.gz")
//    }
//    targetPlatform("mac") {
//        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_x64_mac_hotspot_15.0.2_7.tar.gz") {
//            downloadDir = "$buildDir/myMac"
//            archiveName = "my-mac-jdk"
//            archiveExtension = "tar.gz"
//            pathToHome = "jdk-15.0.2+7/Contents/Home"
//            overwrite = true
//        }
//    }
//    targetPlatform("win") {
//        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jdk_x64_windows_hotspot_15.0.2_7.zip")
//    }


    launcher {
        noConsole = true
    }
    jpackage {
        // Uncomment and adjust the following line if your runtime task is configured to generate images for multiple platforms
        // targetPlatformName = "mac"

        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        // def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        // imageOptions += ['--icon', "src/main/resources/hellofx.$imgType"]
        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'Jeff Avery']

        if(currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        }
        else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'hellofx','--linux-shortcut']
        }
        else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'hellofx']
        }
    }
}
